name: Deploy to Staging
on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - preview

jobs:
  test-before-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mysql, mysqli, pdo_mysql, zip, gd, mbstring, curl, xml, bcmath

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-dev --prefer-dist --no-progress --optimize-autoloader
        npm ci

    - name: Run quick tests
      run: |
        # PHP syntax check
        find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
        
        # Theme.json validation
        node -e "JSON.parse(require('fs').readFileSync('theme.json', 'utf8'))"
        
        # CSS validation
        npx stylelint "**/*.css" || true
        
        echo "✅ Pre-deployment tests passed"

  build-and-package:
    needs: test-before-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build production assets
      run: |
        # Minify CSS if build script exists
        if [ -f "package.json" ] && grep -q "build" package.json; then
          npm run build
        fi

    - name: Create deployment package
      run: |
        # Create clean deployment directory
        mkdir -p deploy/kiwi-theme
        
        # Copy theme files (exclude development files)
        rsync -av --exclude-from='.deployignore' . deploy/kiwi-theme/
        
        # Create .deployignore if it doesn't exist
        if [ ! -f ".deployignore" ]; then
          cat > deploy/.deployignore << EOF
        node_modules/
        .git/
        .github/
        tests/
        *.md
        .env*
        .DS_Store
        Thumbs.db
        .vscode/
        .idea/
        *.log
        package-lock.json
        composer.lock
        phpunit.xml
        playwright.config.ts
        .editorconfig
        .gitignore
        EOF
        fi
        
        # Create ZIP for deployment
        cd deploy
        zip -r kiwi-theme-${{ github.sha }}.zip kiwi-theme/

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: kiwi-theme-build
        path: deploy/kiwi-theme-${{ github.sha }}.zip
        retention-days: 30

  deploy-staging:
    needs: build-and-package
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: kiwi-theme-build

    - name: Deploy to staging server
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.environment || 'staging' }} environment"
        echo "📦 Package: kiwi-theme-${{ github.sha }}.zip"
        echo "🏷️  Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        
        # In a real deployment, you would:
        # 1. Upload the ZIP to your staging server
        # 2. Extract it to the themes directory
        # 3. Run any necessary database migrations
        # 4. Clear caches
        # 5. Notify team of deployment
        
        echo "✅ Deployment completed successfully"

  notify-deployment:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Deployment to ${{ github.event.inputs.environment || 'staging' }} successful"
          echo "🔗 URL: https://staging.your-domain.com"
          echo "🏷️  Version: ${{ github.sha }}"
        else
          echo "❌ Deployment to ${{ github.event.inputs.environment || 'staging' }} failed"
          echo "🔍 Check logs for details"
        fi

  post-deployment-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Post-deployment health check
      run: |
        echo "🔍 Running post-deployment health checks..."
        
        # In a real scenario, you would:
        # 1. Check if the theme is active
        # 2. Verify key pages load correctly
        # 3. Run smoke tests
        # 4. Check for PHP errors in logs
        # 5. Validate core functionality
        
        echo "✅ Post-deployment tests passed"